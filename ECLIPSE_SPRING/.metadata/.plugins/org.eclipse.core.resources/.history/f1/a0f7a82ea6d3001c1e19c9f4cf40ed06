package it.uniroma3.catering.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import it.uniroma3.catering.model.Chef;
import it.uniroma3.catering.service.ChefService;
import it.uniroma3.catering.validator.ChefValidator;

@Controller
public class ChefController {
	
	@Autowired
	private ChefService chefService;
	
	@Autowired
	private ChefValidator chefValidator;
	
	/*
	 * convenzione: get per le operazioni di lettura, post per gli aggiornamenti
	 * il path è associato alle classi del dominio
	*/
	
	@PostMapping("/chef")
	public String newChef(@Valid @ModelAttribute("chef") Chef chef, Model model,
			BindingResult bindingResult) {
		
		/* Se non ci sono errori inserisce la ricorrenza di buffet 
		 * tramite la save del service 
		 * */
		
		if (!bindingResult.hasErrors()) {
			
			this.chefService.save(chef);
			model.addAttribute("chef", chefService.findById(chef.getId()));
			
			// Ogni metodo ritorna la stringa col nome della vista successiva
			
			return "chef.html"; // se non ci sono errori si va alla form di conferma
		}
		else
			return "chefForm.html"; // se ci sono errori si rimanda alla form di inserimento
	}

	// richiede un singolo chef tramite id
	@GetMapping("/chef/{id}")
	public String getChef(@PathVariable("id")Long id, Model model) {
		// id è una variabile associata al path
		Chef chef = chefService.findById(id);
		model.addAttribute("chef", chef);
		// ritorna la form con i dati dell'entità richiesta
		return "chef.html";
	}
	
	// richiede tutti gli  chefs, non c'è id
	@GetMapping("/chefs")
	public String getChefs(Model model) {
		List<Chef> chefs = chefService.findAll();
		model.addAttribute("chefs", chefs);
		return "chefs.html";
	}
	
	@GetMapping("/chefForm/{id}")
	public String getChef(Model model) {
		model.addAttribute("chef", new Chef());
		return "chefForm.html";
	}
}

